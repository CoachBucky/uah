<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Calculus Limit Visualization</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: white;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
        }
        
        h1 {
            text-align: center;
            margin-bottom: 30px;
            font-size: 2.5em;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        }
        
        .simulation-area {
            display: grid;
            grid-template-columns: 1fr 300px;
            gap: 30px;
            margin-bottom: 30px;
        }
        
        .canvas-container {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
        }
        
        #canvas {
            border: 2px solid #333;
            border-radius: 10px;
            background: white;
            cursor: crosshair;
        }
        
        .controls {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            padding: 25px;
            backdrop-filter: blur(10px);
        }
        
        .control-group {
            margin-bottom: 25px;
        }
        
        .control-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: bold;
            font-size: 1.1em;
        }
        
        .control-group select, .control-group input {
            width: 100%;
            padding: 10px;
            border: none;
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.9);
            color: #333;
            font-size: 16px;
        }
        
        .control-group button {
            width: 100%;
            padding: 12px;
            background: linear-gradient(45deg, #ff6b6b, #ee5a24);
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .control-group button:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }
        
        .info-panel {
            background: rgba(255, 255, 255, 0.15);
            border-radius: 12px;
            padding: 20px;
            margin-top: 15px;
            font-size: 14px;
            line-height: 1.6;
        }
        
        .limit-info {
            background: rgba(255, 255, 255, 0.2);
            border-radius: 10px;
            padding: 15px;
            margin-top: 15px;
            font-family: 'Courier New', monospace;
            font-size: 16px;
            border-left: 4px solid #ff6b6b;
        }
        
        .point-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 15px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            overflow: hidden;
        }
        
        .point-table th, .point-table td {
            padding: 8px;
            text-align: center;
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
        }
        
        .point-table th {
            background: rgba(255, 255, 255, 0.2);
            font-weight: bold;
        }
        
        .approaching-left { color: #ff6b6b; }
        .approaching-right { color: #4ecdc4; }
        
        @media (max-width: 768px) {
            .simulation-area {
                grid-template-columns: 1fr;
            }
            
            .container {
                padding: 15px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>ðŸ“Š Calculus Limit Visualization</h1>
        
        <div class="simulation-area">
            <div class="canvas-container">
                <canvas id="canvas" width="600" height="400"></canvas>
            </div>
            
            <div class="controls">
                <div class="control-group">
                    <label for="functionSelect">Select Function:</label>
                    <select id="functionSelect">
                        <option value="rational">f(x) = (xÂ²-1)/(x-1)</option>
                        <option value="sin">f(x) = sin(x)/x</option>
                        <option value="continuous">f(x) = xÂ² + 1</option>
                        <option value="step">f(x) = step function</option>
                    </select>
                </div>
                
                <div class="control-group">
                    <label for="approachPoint">Approach Point (a):</label>
                    <input type="number" id="approachPoint" value="1" step="0.1">
                </div>
                
                <div class="control-group">
                    <label for="deltaValue">Delta (Î´):</label>
                    <input type="range" id="deltaValue" min="0.01" max="2" step="0.01" value="0.5">
                    <span id="deltaDisplay">0.5</span>
                </div>
                
                <div class="control-group">
                    <button onclick="animateLimit()">Animate Limit</button>
                </div>
                
                <div class="limit-info">
                    <div>lim<sub>xâ†’<span id="limitPoint">1</span></sub> f(x) = <span id="limitValue">2</span></div>
                    <div style="margin-top: 10px;">
                        Left: <span id="leftLimit" class="approaching-left">-</span><br>
                        Right: <span id="rightLimit" class="approaching-right">-</span>
                    </div>
                </div>
                
                <div class="info-panel">
                    <strong>How to use:</strong><br>
                    â€¢ Select different functions to explore<br>
                    â€¢ Adjust the approach point (a)<br>
                    â€¢ Use the delta slider to see the neighborhood<br>
                    â€¢ Click "Animate Limit" to watch the approach<br>
                    â€¢ Red dots approach from the left, blue from the right
                </div>
                
                <table class="point-table">
                    <thead>
                        <tr>
                            <th>x</th>
                            <th>f(x)</th>
                            <th>Direction</th>
                        </tr>
                    </thead>
                    <tbody id="pointTableBody">
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <script>
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');
        const functionSelect = document.getElementById('functionSelect');
        const approachPointInput = document.getElementById('approachPoint');
        const deltaSlider = document.getElementById('deltaValue');
        const deltaDisplay = document.getElementById('deltaDisplay');
        const limitPoint = document.getElementById('limitPoint');
        const limitValue = document.getElementById('limitValue');
        const leftLimit = document.getElementById('leftLimit');
        const rightLimit = document.getElementById('rightLimit');
        const pointTableBody = document.getElementById('pointTableBody');
        
        let animationId;
        let animationStep = 0;
        let approachingPoints = [];
        
        // Grid and scale settings
        const gridSize = 20;
        const centerX = canvas.width / 2;
        const centerY = canvas.height / 2;
        const scaleX = 60;
        const scaleY = 60;
        
        // Function definitions
        const functions = {
            rational: (x) => Math.abs(x - 1) < 0.001 ? 2 : (x * x - 1) / (x - 1),
            sin: (x) => Math.abs(x) < 0.001 ? 1 : Math.sin(x) / x,
            continuous: (x) => x * x + 1,
            step: (x) => x >= 0 ? 1 : -1
        };
        
        const limitValues = {
            rational: 2,
            sin: 1,
            continuous: (a) => a * a + 1,
            step: (a) => a === 0 ? undefined : (a > 0 ? 1 : -1)
        };
        
        function drawGrid() {
            ctx.strokeStyle = '#e0e0e0';
            ctx.lineWidth = 1;
            
            // Vertical grid lines
            for (let x = 0; x <= canvas.width; x += gridSize) {
                ctx.beginPath();
                ctx.moveTo(x, 0);
                ctx.lineTo(x, canvas.height);
                ctx.stroke();
            }
            
            // Horizontal grid lines
            for (let y = 0; y <= canvas.height; y += gridSize) {
                ctx.beginPath();
                ctx.moveTo(0, y);
                ctx.lineTo(canvas.width, y);
                ctx.stroke();
            }
        }
        
        function drawAxes() {
            ctx.strokeStyle = '#333';
            ctx.lineWidth = 2;
            
            // X-axis
            ctx.beginPath();
            ctx.moveTo(0, centerY);
            ctx.lineTo(canvas.width, centerY);
            ctx.stroke();
            
            // Y-axis
            ctx.beginPath();
            ctx.moveTo(centerX, 0);
            ctx.lineTo(centerX, canvas.height);
            ctx.stroke();
            
            // Axis labels
            ctx.fillStyle = '#333';
            ctx.font = '12px Arial';
            ctx.textAlign = 'center';
            
            // X-axis numbers
            for (let i = -5; i <= 5; i++) {
                if (i !== 0) {
                    const x = centerX + i * scaleX;
                    ctx.fillText(i.toString(), x, centerY + 15);
                }
            }
            
            // Y-axis numbers
            ctx.textAlign = 'right';
            for (let i = -3; i <= 3; i++) {
                if (i !== 0) {
                    const y = centerY - i * scaleY;
                    ctx.fillText(i.toString(), centerX - 10, y + 5);
                }
            }
        }
        
        function screenToWorld(screenX, screenY) {
            return {
                x: (screenX - centerX) / scaleX,
                y: (centerY - screenY) / scaleY
            };
        }
        
        function worldToScreen(worldX, worldY) {
            return {
                x: centerX + worldX * scaleX,
                y: centerY - worldY * scaleY
            };
        }
        
        function drawFunction() {
            const selectedFunc = functionSelect.value;
            const func = functions[selectedFunc];
            
            ctx.strokeStyle = '#2196F3';
            ctx.lineWidth = 3;
            ctx.beginPath();
            
            let firstPoint = true;
            const approachPoint = parseFloat(approachPointInput.value);
            
            for (let screenX = 0; screenX <= canvas.width; screenX += 2) {
                const worldX = screenToWorld(screenX, 0).x;
                
                // Skip the discontinuity point for rational and sin functions
                if ((selectedFunc === 'rational' && Math.abs(worldX - 1) < 0.01) ||
                    (selectedFunc === 'sin' && Math.abs(worldX) < 0.01)) {
                    firstPoint = true;
                    continue;
                }
                
                try {
                    const worldY = func(worldX);
                    const screenPos = worldToScreen(worldX, worldY);
                    
                    if (isFinite(worldY) && screenPos.y >= -50 && screenPos.y <= canvas.height + 50) {
                        if (firstPoint) {
                            ctx.moveTo(screenPos.x, screenPos.y);
                            firstPoint = false;
                        } else {
                            ctx.lineTo(screenPos.x, screenPos.y);
                        }
                    } else {
                        firstPoint = true;
                    }
                } catch (e) {
                    firstPoint = true;
                }
            }
            
            ctx.stroke();
        }
        
        function drawApproachVisualization() {
            const approachPoint = parseFloat(approachPointInput.value);
            const delta = parseFloat(deltaSlider.value);
            
            // Draw the approach point line
            ctx.strokeStyle = '#ff6b6b';
            ctx.lineWidth = 2;
            ctx.setLineDash([5, 5]);
            
            const approachScreenX = worldToScreen(approachPoint, 0).x;
            ctx.beginPath();
            ctx.moveTo(approachScreenX, 0);
            ctx.lineTo(approachScreenX, canvas.height);
            ctx.stroke();
            
            // Draw delta neighborhood
            ctx.strokeStyle = 'rgba(255, 107, 107, 0.3)';
            ctx.fillStyle = 'rgba(255, 107, 107, 0.1)';
            ctx.setLineDash([]);
            
            const leftX = worldToScreen(approachPoint - delta, 0).x;
            const rightX = worldToScreen(approachPoint + delta, 0).x;
            
            ctx.fillRect(leftX, 0, rightX - leftX, canvas.height);
            ctx.strokeRect(leftX, 0, rightX - leftX, canvas.height);
            
            // Draw approaching points
            approachingPoints.forEach(point => {
                const screenPos = worldToScreen(point.x, point.y);
                ctx.fillStyle = point.fromLeft ? '#ff6b6b' : '#4ecdc4';
                ctx.beginPath();
                ctx.arc(screenPos.x, screenPos.y, 6, 0, 2 * Math.PI);
                ctx.fill();
                
                // Draw connecting line to limit
                const selectedFunc = functionSelect.value;
                const limitVal = typeof limitValues[selectedFunc] === 'function' ? 
                    limitValues[selectedFunc](approachPoint) : limitValues[selectedFunc];
                
                if (limitVal !== undefined) {
                    const limitScreenPos = worldToScreen(approachPoint, limitVal);
                    ctx.strokeStyle = point.fromLeft ? 'rgba(255, 107, 107, 0.5)' : 'rgba(78, 205, 196, 0.5)';
                    ctx.lineWidth = 1;
                    ctx.setLineDash([2, 2]);
                    ctx.beginPath();
                    ctx.moveTo(screenPos.x, screenPos.y);
                    ctx.lineTo(limitScreenPos.x, limitScreenPos.y);
                    ctx.stroke();
                }
            });
        }
        
        function updateLimitInfo() {
            const selectedFunc = functionSelect.value;
            const approachPoint = parseFloat(approachPointInput.value);
            const func = functions[selectedFunc];
            
            limitPoint.textContent = approachPoint.toFixed(1);
            
            // Calculate limit value
            let limitVal;
            if (typeof limitValues[selectedFunc] === 'function') {
                limitVal = limitValues[selectedFunc](approachPoint);
            } else {
                limitVal = limitValues[selectedFunc];
            }
            
            if (limitVal !== undefined) {
                limitValue.textContent = limitVal.toFixed(2);
            } else {
                limitValue.textContent = 'DNE';
            }
            
            // Calculate left and right limits
            const epsilon = 0.001;
            try {
                const leftVal = func(approachPoint - epsilon);
                const rightVal = func(approachPoint + epsilon);
                
                leftLimit.textContent = isFinite(leftVal) ? leftVal.toFixed(3) : 'DNE';
                rightLimit.textContent = isFinite(rightVal) ? rightVal.toFixed(3) : 'DNE';
            } catch (e) {
                leftLimit.textContent = 'DNE';
                rightLimit.textContent = 'DNE';
            }
        }
        
        function updatePointTable() {
            pointTableBody.innerHTML = '';
            
            approachingPoints.forEach(point => {
                const row = pointTableBody.insertRow();
                row.insertCell(0).textContent = point.x.toFixed(4);
                row.insertCell(1).textContent = point.y.toFixed(4);
                row.insertCell(2).innerHTML = point.fromLeft ? 
                    '<span class="approaching-left">Left</span>' : 
                    '<span class="approaching-right">Right</span>';
            });
        }
        
        function draw() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            drawGrid();
            drawAxes();
            drawFunction();
            drawApproachVisualization();
            
            updateLimitInfo();
            updatePointTable();
        }
        
        function animateLimit() {
            if (animationId) {
                cancelAnimationFrame(animationId);
            }
            
            approachingPoints = [];
            animationStep = 0;
            
            function animate() {
                const approachPoint = parseFloat(approachPointInput.value);
                const selectedFunc = functionSelect.value;
                const func = functions[selectedFunc];
                
                if (animationStep < 30) {
                    const delta = Math.pow(0.9, animationStep) * 2;
                    
                    // Add points approaching from left and right
                    const leftX = approachPoint - delta;
                    const rightX = approachPoint + delta;
                    
                    try {
                        const leftY = func(leftX);
                        const rightY = func(rightX);
                        
                        if (isFinite(leftY)) {
                            approachingPoints.push({x: leftX, y: leftY, fromLeft: true});
                        }
                        if (isFinite(rightY)) {
                            approachingPoints.push({x: rightX, y: rightY, fromLeft: false});
                        }
                    } catch (e) {
                        // Skip if function undefined at this point
                    }
                    
                    // Keep only the last 10 points for clarity
                    if (approachingPoints.length > 20) {
                        approachingPoints = approachingPoints.slice(-20);
                    }
                    
                    animationStep++;
                    draw();
                    animationId = requestAnimationFrame(animate);
                } else {
                    draw();
                }
            }
            
            animate();
        }
        
        // Event listeners
        functionSelect.addEventListener('change', () => {
            approachingPoints = [];
            if (functionSelect.value === 'rational') {
                approachPointInput.value = '1';
            } else if (functionSelect.value === 'sin') {
                approachPointInput.value = '0';
            } else if (functionSelect.value === 'step') {
                approachPointInput.value = '0';
            }
            draw();
        });
        
        approachPointInput.addEventListener('input', () => {
            approachingPoints = [];
            draw();
        });
        
        deltaSlider.addEventListener('input', () => {
            deltaDisplay.textContent = deltaSlider.value;
            draw();
        });
        
        // Initial draw
        draw();
    </script>
</body>
</html>
